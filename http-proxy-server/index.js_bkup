
/*var http = require('http');
var httpProxy = require('http-proxy');

var proxy = new httpProxy.createProxyServer({
  target: {
    host: 'localhost',
    port: 9015
  }
});

var proxyServer = http.createServer(function (req, res) {
  proxy.web(req, res);
});

// Listen to the `upgrade` event and proxy the
// WebSocket requests as well.

proxyServer.on('upgrade', function (req, socket, head) {
	console.log("upgrade call");
  	proxy.ws(req, socket, head);
});

proxyServer.on ('error', function(error){
	console.log("catching error " + error)
});

proxyServer.listen(8015); */






/*var http = require('http');
var httpProxy = require('http-proxy');

var proxy = httpProxy.createProxyServer({});

var server = http.createServer(function(req, res) {
    proxy.web(req, res, { target: 'http://www.google.com'});
    console.log("listening on port 8000")
}); 

server.on('error', function(error){
  console.log(error);
});

server.listen(8000);  */
//#############################################################

var http = require('http');
var httpProxy = require('http-proxy');

//var proxy = httpProxy.createProxyServer({target:'http://localhost:9000', ws:true});
var proxy = httpProxy.createProxyServer({});

var proxyServer = http.createServer(function (req, res) {
  console.log("http server created");
  proxy.web(req, res, {
    target:'http://localhost:9001',
    ws:'true'
  });
}).listen(8001);


proxy.on('error', function(err){
  console.log("error when creating proxy");
  if(err){
    throw err;
  }
});

//proxyServer.listen(8001);

//
// Listen to the `upgrade` event and proxy the
// WebSocket requests as well.
//
//proxyServer.on('upgrade', function (req, socket, head) {
 // console.log("upgrade invoked");
 // proxy.ws(req, socket, head);
//});


//#################################################################


/*var http = require('http');
var httpProxy = require('http-proxy');
// HTTP Proxy Server
var proxy = httpProxy.createProxyServer({target:'http://localhost:9000', ws:true});
function requestHandler(req, res) {
  // Pass a callback to the web proxy method
  // and catch the error there.
  console.log("inside requestHandler");
  proxy.web(req, res, function (err) {
    // Now you can get the err
    // and handle it by your self
    // if (err) throw err;
    res.writeHead(502);
    res.end("There was an error proxying your request");
  });

  // In a websocket request case
  req.on('upgrade', function (req, socket, head) {
    console.log("inside upgrade");
    proxy.ws(req, socket, head, function (err) {
      // Now you can get the err
      // and handle it by your self
      // if (err) throw err;
      socket.close();
    })
  })
}

http.createServer(requestHandler).listen(8000);*/









